{"version":3,"sources":["app/ViewExcel.tsx","common/IframeContainer.tsx","common/DataConector.tsx","app/ViewTemplate.tsx","app/ViewSender.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["ViewExcel","props","state","cols","rows","onClear","bind","onUploadFile","emails","localStorage","getItem","this","setState","JSON","parse","e","removeItem","stepChange","event","fileObj","target","files","ExcelRenderer","err","resp","console","log","setItem","stringify","length","row","className","onClick","map","item","index","scope","key","rowIndex","type","name","id","onChange","accept","htmlFor","React","Component","IframeContainer","iframe","createRef","refreshIframe","body","css","current","document","contentDocument","innerHTML","onload","obj","contentWindow","style","height","documentElement","scrollHeight","head","getElementsByTagName","createElement","appendChild","ref","DC","url","axios","method","catch","error","undefined","response","data","wasOk","message","apiKey","messages","Messages","user","split","headers","auth","username","password","ViewTemplate","tab","template","onTabClick","Get","result","preventDefault","currentTarget","dataset","data-tab","href","defaultValue","ViewSender","onSetTestClick","From","Name","Email","To","HTMLPart","TextPart","Subject","MailjetSend","App","isLoading","step","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d51b2298.chunk.js","sourcesContent":["import React from 'react';\nimport {OutTable, ExcelRenderer} from 'react-excel-renderer';\n\ninterface State {\n    cols:any[]\n    rows:any[]\n}\n\ninterface Props {\n    stepChange: (step: number) => void\n}\n\nclass ViewExcel extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            cols:[],\n            rows:[]\n        }\n        this.onClear = this.onClear.bind(this)\n        this.onUploadFile = this.onUploadFile.bind(this)\n    }\n\n    componentDidMount() {\n        let emails = localStorage.getItem('emails');\n        if(emails)\n            this.setState(JSON.parse(emails));\n    }\n\n    onClear(e:any){\n        this.setState({cols:[],rows:[]})\n        localStorage.removeItem('emails');\n        this.props.stepChange(1)\n    }\n\n    async onUploadFile(event:any) {\n        let fileObj = event.target.files[0];\n        ExcelRenderer(fileObj, (err: any, resp: any) => {\n            if (err) {\n                console.log(err);\n            } else {\n                this.setState({\n                    cols: resp.cols,\n                    rows: resp.rows\n                });\n                localStorage.setItem('emails', JSON.stringify({cols: resp.cols,rows: resp.rows}));\n                if (resp.rows.length > 1)\n                    this.props.stepChange(2)\n            }\n        });\n    }\n\n    render() {\n        if(this.state.rows.length > 0) {\n            let row = this.state.rows[0];\n            return (\n                <div className=\"card-body\">\n                    <i className=\"far fa-trash-alt pull-right pointer mt50\" onClick={this.onClear} />\n                    <div className=\"tableFixHead\">\n                    <table className=\"table\">\n                        <thead>\n                        <tr>\n                            {this.state.cols.map((item, index) => (\n                                <th scope=\"col\" key={index}>{row[index]}</th>\n                            ))}\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.state.rows.map((row, rowIndex) => (\n                            rowIndex > 0 &&\n                            <tr key={rowIndex}>\n                                {this.state.cols.map((item, index) => (\n                                <td scope=\"col\" key={index}>{row[index]}</td>\n                                ))}\n                            </tr>\n                        ))}\n\n                        </tbody>\n                    </table>\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"card-body\">\n                <p className=\"card-text\">Carga la lista de email desde un fichero excel.</p>\n                <div>\n                    <input type=\"file\" name=\"file\" id=\"fileExcel\" onChange={this.onUploadFile} accept=\"application/*\" className=\"hidden\"/>\n                    <div className=\"btn-group-toggle\">\n                        <label htmlFor=\"fileExcel\" className=\"btn btn-outline-primary w-100 \">\n                            <i className=\"fas fa-upload mr-1\"/>Cargar datos\n                        </label>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ViewExcel;\n","import React from 'react';\ninterface State {\n}\n\ninterface Props {\n    className:string\n    body:string\n    css:string\n}\n\n\nclass IframeContainer extends React.Component<Props, State> {\n    iframe:any\n    constructor(props: Props) {\n        super(props);\n        this.iframe = React.createRef();\n        this.refreshIframe = this.refreshIframe.bind(this)\n    }\n\n    async componentDidMount() {\n        this.refreshIframe();\n    }\n\n    componentDidUpdate() {\n        this.refreshIframe();\n    }\n\n    refreshIframe() {\n        let body = this.props.body;\n        let css = this.props.css;\n        const iframe = this.iframe.current;\n        const document = iframe.contentDocument;\n        document.body.innerHTML =  body;\n        try {\n            iframe.onload = function (obj: any) {\n                if(obj.contentWindow)\n                obj.style.height = obj.contentWindow.document.documentElement.scrollHeight + 'px';\n            };\n        }catch (e) {\n            \n        }\n        const head = document.getElementsByTagName('head')[0];\n\n        let style = document.createElement('style');\n        style.innerHTML = css;\n        head.appendChild(style);\n\n    }\n\n    render() {\n        return <iframe className={this.props.className} ref={this.iframe} />\n    }\n}\n\n\nexport default IframeContainer","import axios from 'axios';\n//const qs = require(\"qs\");\nimport MessageModel from \"./MessageModel\";\n\nclass DC {\n    public static async Get(url: string) {\n        const response = await axios({\n            method: 'get',\n            url: url,\n        }).catch(error => {\n            console.log(error);\n        });\n\n        if (response !== undefined) return response.data; else return {wasOk: false};\n    }\n\n    public static async MailjetSend(message:MessageModel,apiKey:string) {\n        let messages = {\n            Messages:[message]\n        }\n        let user = apiKey.split(':')\n        const response = await axios({\n            method: 'put',\n            url: 'https://api.mailjet.com/v3.1/send',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n                'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n            },\n            auth: {\n                username: user[0],\n                password: user[1]\n            },\n            data: JSON.stringify(messages)\n        }).catch(error => {\n            console.log(error);\n        });\n\n        if (response !== undefined) return response.data; else return {wasOk: false};\n\n\n\n\n    }\n}\nexport default DC;\n\n","import React from 'react';\nimport IframeContainer from \"../common/IframeContainer\";\nimport DC from \"../common/DataConector\"\ninterface State {\n    tab:string,\n    template:string\n}\n\ninterface Props {\n    stepChange: (step: number) => void\n}\n\nclass ViewTemplate extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            tab:'preview',\n            template: ''\n        }\n        this.onTabClick = this.onTabClick.bind(this)\n    }\n\n    async componentDidMount() {\n        const result = await DC.Get('./template.html');\n        this.setState({template:result})\n    }\n\n    onTabClick(e: any) {\n        e.preventDefault();\n        this.setState({tab: e.currentTarget.dataset.tab})\n    }\n\n    render() {\n        return (\n            <div className=\"card-body\">\n                <p className=\"card-text\">Añade columnas con {'{{COL_NAME}}'}</p>\n                <ul className=\"nav nav-tabs\">\n                    <li className=\"nav-item\" data-tab=\"preview\" onClick={this.onTabClick}>\n                        <a className={\"nav-link\" + (this.state.tab == 'preview' ? \" active\" : \"\")} href=\"#\"\n                        >Preview</a>\n                    </li>\n                    <li className=\"nav-item\" data-tab=\"html\" onClick={this.onTabClick}>\n                        <a className={\"nav-link\" + (this.state.tab == 'html' ? \" active\" : \"\")} href=\"#\"\n                        >Html</a>\n                    </li>\n                </ul>\n                <div className=\"tab-content\" id=\"myTabContent\">\n                    <div className={\"tab-pane fade\" + (this.state.tab == 'preview' ? \" show active\" : \"\")}>\n                        <IframeContainer className=\"\" body={this.state.template} css=\"\" />\n                    </div>\n                    <div className={\"tab-pane fade\" + (this.state.tab == 'html' ? \" show active\" : \"\")}>\n                        <textarea className=\"html\" defaultValue={this.state.template}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ViewTemplate;\n","import React from 'react';\nimport DC from \"../common/DataConector\"\nimport MessageModel from \"../common/MessageModel\";\n\ninterface State {\n}\n\ninterface Props {\n    stepChange: (step: number) => void\n}\n\nclass ViewSender extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n        }\n        this.onSetTestClick = this.onSetTestClick.bind(this)\n    }\n    async onSetTestClick(e:any){\n        let message:MessageModel = {\n            From:{\n                Name:'info@geoobs.com',\n                Email:'Geoobs'\n            },\n            To:[{Name:'Roberto',Email:'raabril@gmail.com'}],\n            HTMLPart:'Esto es una prueba',\n            TextPart:'Esto es una prueba',\n            Subject:'Test email'\n        }\n\n        await DC.MailjetSend(message,'');\n\n    }\n\n    render() {\n        return (\n            <div className=\"card-body\">\n                <p className=\"card-text\">Enviar emails.</p>\n\n                <button  className=\"btn btn-outline-primary \" onClick={this.onSetTestClick}>Enviar</button>\n            </div>\n        )\n    }\n}\n\nexport default ViewSender;\n","import React from 'react';\nimport ViewExcel from \"./ViewExcel\"\nimport ViewTemplate from \"./ViewTemplate\";\nimport ViewSender from \"./ViewSender\";\n\ninterface State {\n  isLoading: boolean,\n  step:number\n}\n\ninterface Props {\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      step: 3\n    }\n    this.stepChange = this.stepChange.bind(this)\n  }\n\n  stepChange(step:number){\n    this.setState({step:step})\n  }\n\n  render() {\n    return (\n        <div className=\"container\">\n          <header className=\"blog-header py-3\">\n            <div className=\"row flex-nowrap justify-content-between align-items-center\">\n              <div className=\"col-4 pt-1\">\n              </div>\n              <div className=\"col-4 text-center\">\n                <a className=\"blog-header-logo text-dark\" href=\"#\">Mails Sender</a>\n              </div>\n              <div className=\"col-4 d-flex justify-content-end align-items-center\">\n              </div>\n            </div>\n          </header>\n\n          <main role=\"main\" className=\"container\">\n            <br/>\n            <div className=\"card\">\n              <div className=\"card-header\">\n                1 - Lista de email\n              </div>\n                <ViewExcel stepChange={this.stepChange}/>\n            </div>\n\n            <div className=\"card mt-5\">\n              <div className=\"card-header\">\n                2 - Template / Plantilla\n              </div>\n              {this.state.step > 1 && <ViewTemplate stepChange={this.stepChange}/> }\n            </div>\n\n            <div className=\"card mt-5 mb-5\">\n              <div className=\"card-header\">\n                3 - Enviar con Mailjet\n              </div>\n              {this.state.step > 2 && <ViewSender stepChange={this.stepChange} /> }\n            </div>\n            <br/>\n          </main>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/bootstrap.min.css'\nimport './styles/index.css'\nimport './styles/index_loading.css'\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}